rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function hasRole(role) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update, delete: if isOwner(userId);
    }
    
    // Announcements collection
    match /announcements/{announcementId} {
      allow read: if true; // Public read access
      allow create, update: if isAuthenticated() && hasRole('government');
      allow delete: if isAuthenticated() && hasRole('government');
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true; // Public read access
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && 
          request.auth.uid == resource.data.userId && 
          !resource.data.isAnonymous;
      }
    }
    
    // Problem Reports collection
    match /problem_reports/{reportId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasRole('citizen');
      allow update: if isAuthenticated() && (
        (hasRole('citizen') && isOwner(resource.data.userId)) || 
        hasRole('government')
      );
      allow delete: if isAuthenticated() && hasRole('government');
    }
    
    // Government Messages collection
    match /government_messages/{messageId} {
      allow read: if isAuthenticated() && (
        hasRole('government') || 
        (hasRole('citizen') && (
          resource.data.userId == request.auth.uid || 
          resource.data.isAnonymous == false
        ))
      );
      allow create: if isAuthenticated() && hasRole('citizen');
      allow update: if isAuthenticated() && hasRole('government') && (
        resource.data.status == 'Unread' || 
        resource.data.status == 'Read'
      );
      allow delete: if isAuthenticated() && hasRole('government');
    }
    
    // Polls collection
    match /polls/{pollId} {
      allow read: if true; // Public read access
      allow create, update: if isAuthenticated() && hasRole('government');
      allow delete: if isAuthenticated() && hasRole('government');
      
      // Votes subcollection
      match /votes/{voteId} {
        allow read: if isAuthenticated() && (
          hasRole('government') ||
          !get(/databases/$(database)/documents/polls/$(pollId)).data.isAnonymous ||
          isOwner(voteId)
        );
        allow create, update: if isAuthenticated() && isOwner(voteId);
        allow delete: if isAuthenticated() && hasRole('government');
      }
    }
    
    // Emergency Contacts collection
    match /emergency_contacts/{contactId} {
      allow read: if true; // Public read access
      allow create, update, delete: if isAuthenticated() && hasRole('government');
    }
    
    // Advertisements collection
    match /ads/{adId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && hasRole('advertiser');
      allow update: if isAuthenticated() && (
        (hasRole('advertiser') && isOwner(resource.data.userId)) ||
        hasRole('government') // Government can approve/reject ads
      );
      allow delete: if isAuthenticated() && (
        (hasRole('advertiser') && isOwner(resource.data.userId)) ||
        hasRole('government')
      );
    }
  }
} 